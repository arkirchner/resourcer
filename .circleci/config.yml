# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2
jobs:
  test:
    docker:
      # specify the version you desire here
      - image: circleci/ruby:2.7-node-browsers

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/postgres:11
        environment:
          POSTGRES_USER: circleci
          POSTGRES_HOST_AUTH_METHOD: trust

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "Gemfile.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install Ruby dependencies
          command: |
            gem install bundler
            bundle config set path 'vendor/bundle'
            bundle install --jobs=4 --retry=3

      - run:
          name: install JavaScript dependencies
          command: |
            yarn install

      - save_cache:
          paths:
            - ./vendor/bundle
            - ~/repo/node_modules
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}

      # Database setup
      - run: bundle exec rake db:create
      - run: bundle exec rake db:schema:load

      # Lint factories
      - run:
          name: lint factories
          command: bin/rails factory_bot:lint

      # run tests!
      - run:
          name: run tests
          command: |
            mkdir /tmp/test-results
            PARALLEL_WORKERS=2 bundle exec rails test:system test

      # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

  deploy:
    working_directory: ~/app
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Deploy Environment on Google Cloud Run.
          command: |
            apt-get install -y -q --no-install-recommends gettext
            echo $DEPLOY_SERVICE_USER_KEY | base64 --decode | gcloud auth activate-service-account --key-file=-
            ./bin/deploy

workflows:
  version: 2
  test_and_deploy:
    jobs:
      - test
      - deploy:
          requires:
            - test
          filters:
            branches:
              only:
                - master
